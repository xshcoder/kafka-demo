# Kafka Broker Configuration
# Assuming connection via Docker Compose service name 'kafka'
spring.kafka.consumer.bootstrap-servers=kafka:9092
spring.kafka.consumer.group-id=my-group
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
# Change value deserializer for protobuf bytes
spring.kafka.consumer.value-deserializer=io.confluent.kafka.serializers.protobuf.KafkaProtobufDeserializer
spring.kafka.consumer.schema-registry-url=http://schema-registry:8081

# Consumer behavior if no offset is found or the offset is invalid
# Valid values: latest, earliest, none
spring.kafka.consumer.auto-offset-reset=earliest

# Define the topic name (should match producer)
app.kafka.topic=demo-topic
# Define the stream topic name
app.kafka.stream-topic=demo-stream-topic

# Kafka Streams Application ID (must be unique per application instance group)
spring.kafka.streams.application-id=post-stream-processor
# Optional: Define the server port if you want to access the controller/Swagger UI
# server.port=8081
# Expose Prometheus endpoint via Actuator

management.endpoints.web.exposure.include=prometheus
management.endpoint.health.show-details=always
# The consumer service runs on port 8080 internally (mapped to 8081 externally)
# Actuator will use this port by default. No need to set management.server.port unless you want a different internal port.